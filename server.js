const express = require('express');
const app = express();
const path = require('path');
const fs = require('fs');

// Upewnij siƒô, ≈ºe katalog uploads istnieje
const uploadsDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadsDir)) {
    fs.mkdirSync(uploadsDir, { recursive: true });
    console.log('üìÅ Utworzono katalog uploads');
}

// Udostƒôpnij katalog uploads jako statyczny z dodatkowymi headerami bezpiecze≈Ñstwa
app.use('/uploads', (req, res, next) => {
  // Ustaw headery bezpiecze≈Ñstwa dla plik√≥w
  res.setHeader('X-Content-Type-Options', 'nosniff');
  res.setHeader('X-Frame-Options', 'DENY');
  res.setHeader('Content-Security-Policy', "default-src 'none'; img-src 'self'");
  
  // Sprawd≈∫ czy to jest rzeczywi≈õcie plik obrazka na podstawie rozszerzenia
  const filePath = req.path;
  const allowedExts = ['.jpg', '.jpeg', '.png', '.gif', '.webp'];
  const ext = path.extname(filePath).toLowerCase();
  
  if (!allowedExts.includes(ext)) {
    return res.status(403).json({ error: 'Niedozwolony typ pliku' });
  }
  
  next();
}, express.static(path.join(__dirname, 'uploads')));

const multer = require('multer');
const cors = require('cors');
const morgan = require('morgan');
const bodyParser = require('body-parser');
const sanitizeHtml = require('sanitize-html');
const bcrypt = require('bcryptjs');
const sqlite3 = require('sqlite3').verbose();
const nodemailer = require('nodemailer');
const jwt = require('jsonwebtoken');
const cookieParser = require('cookie-parser'); // Dodane dla obs≈Çugi cookies
const db = new sqlite3.Database('./users.db'); // <-- tylko raz!

// JWT Secret key - ≈Çadowany ze zmiennych ≈õrodowiskowych
const SECRET = process.env.JWT_SECRET || 'super_tajny_klucz_ZMIEN_TO_W_PRODUKCJI';

/*
=== STRUKTURA BAZY DANYCH ===

1. TABELA users:
   - id (INTEGER, PRIMARY KEY, AUTOINCREMENT)
   - firstName, lastName, userClass, phone, messenger, instagram (TEXT)
   - mail (TEXT, UNIQUE)
   - password (TEXT) - zahashowane bcrypt
   - role (TEXT, DEFAULT 'user') - role: 'user', 'admin', 'przewodniczƒÖcy'
   - blockedUntil (TEXT) - data ko≈Ñca blokady w formacie ISO
   - blockReason (TEXT) - pow√≥d blokady

2. TABELA books:
   - id (INTEGER, PRIMARY KEY, AUTOINCREMENT)
   - subject, title, publisher, year, grade, price, stan (TEXT)
   - photo (TEXT) - URL do zdjƒôcia
   - date (TEXT) - data dodania w formacie ISO
   - userMail, userFirstName, userLastName, userClass, userPhone, userMessenger, userInstagram (TEXT)

3. TABELA spotet:
   - id (INTEGER, PRIMARY KEY, AUTOINCREMENT)
   - text (TEXT) - tre≈õƒá wiadomo≈õci
   - photo (TEXT) - opcjonalne zdjƒôcie
   - date (TEXT) - data w formacie ISO
   - authorMail (TEXT) - mail autora

4. TABELA spotet_comments:
   - id (INTEGER, PRIMARY KEY, AUTOINCREMENT)
   - spotetId (INTEGER) - ID wiadomo≈õci spotet
   - text (TEXT) - tre≈õƒá komentarza
   - date (TEXT) - data w formacie ISO
   - authorMail (TEXT) - mail autora
   - isAnonymous (INTEGER, DEFAULT 0) - czy komentarz anonimowy

5. TABELA ogloszenia:
   - id (INTEGER, PRIMARY KEY, AUTOINCREMENT)
   - title (TEXT) - tytu≈Ç og≈Çoszenia
   - text (TEXT) - tre≈õƒá og≈Çoszenia
   - photo (TEXT) - opcjonalne zdjƒôcie
   - date (TEXT) - data w formacie ISO
   - authorMail (TEXT) - mail autora
   - authorRole (TEXT) - rola autora
   - pending (INTEGER, DEFAULT 0) - czy czeka na akceptacjƒô

6. TABELA ogloszenia_comments:
   - id (INTEGER, PRIMARY KEY, AUTOINCREMENT)
   - ogloszenieId (INTEGER) - ID og≈Çoszenia
   - text (TEXT) - tre≈õƒá komentarza
   - date (TEXT) - data w formacie ISO
   - authorMail (TEXT) - mail autora
   - isAnonymous (INTEGER, DEFAULT 0) - czy komentarz anonimowy
*/

// Tworzenie wszystkich tabel z pe≈Çnymi kolumnami
db.run(`CREATE TABLE IF NOT EXISTS users (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  firstName TEXT,
  lastName TEXT,
  userClass TEXT,
  phone TEXT,
  messenger TEXT,
  instagram TEXT,
  mail TEXT UNIQUE,
  password TEXT,
  role TEXT DEFAULT 'user',
  blockedUntil TEXT,
  blockReason TEXT
)`);
db.run(`CREATE TABLE IF NOT EXISTS books (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  subject TEXT,
  title TEXT,
  publisher TEXT,
  year TEXT,
  grade TEXT,
  price TEXT,
  stan TEXT,
  photo TEXT,
  date TEXT,
  userMail TEXT,
  userFirstName TEXT,
  userLastName TEXT,
  userClass TEXT,
  userPhone TEXT,
  userMessenger TEXT,
  userInstagram TEXT
)`);
db.run(`CREATE TABLE IF NOT EXISTS spotet (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  text TEXT,
  photo TEXT,
  date TEXT,
  authorMail TEXT
)`);
db.run(`CREATE TABLE IF NOT EXISTS spotet_comments (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  spotetId INTEGER,
  text TEXT,
  date TEXT,
  authorMail TEXT,
  isAnonymous INTEGER DEFAULT 0
)`);
db.run(`CREATE TABLE IF NOT EXISTS ogloszenia (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  title TEXT,
  text TEXT,
  photo TEXT,
  date TEXT,
  authorMail TEXT,
  authorRole TEXT,
  pending INTEGER DEFAULT 0
)`);
db.run(`CREATE TABLE IF NOT EXISTS ogloszenia_comments (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  ogloszenieId INTEGER,
  text TEXT,
  date TEXT,
  authorMail TEXT,
  isAnonymous INTEGER DEFAULT 0
)`);

// Dodawanie konta admin i testowego (tylko raz)
async function addUsers() {
  const hash = await bcrypt.hash('NpWz5678', 10);

  // Konto admin
  db.run(
    `INSERT OR IGNORE INTO users (firstName, lastName, userClass, phone, messenger, instagram, mail, password, role)
     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
    ['Admin', 'Systemu', 'admin', '', '', '', 'admin@lo2.przemysl.edu.pl', hash, 'admin']
  );
}

 addUsers(); 
 // Odkomentuj, aby dodaƒá konta przy pierwszym uruchomieniu

app.use(cors({
  origin: [
    'https://wiktorksiazka.api.pei.pl', 
    'https://pei.pl', 
    'https://www.pei.pl', 
    'http://localhost:8081', 
    'http://localhost:8082',
    'http://192.168.74.225:8081',
    'http://192.168.74.225:8082',
    'exp://192.168.74.225:8081',
    'exp://192.168.74.225:8082',
    'exp://l_nwawc-anonymous-8082.exp.direct' // Expo tunnel
  ],
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'x-user-mail', 'x-user-role', 'Authorization'],
  credentials: true // Wymagane dla cookies
}));

// Middleware dla cookies
app.use(cookieParser());

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(morgan('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Pamiƒôƒá na oferty (tymczasowa, bez bazy danych)
const offers = [];

// Konfiguracja Multera do zapisu zdjƒôƒá z bezpiecze≈Ñstwem
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads'); // katalog musi istnieƒá!
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    // Wymu≈õ bezpieczne rozszerzenie
    const ext = path.extname(file.originalname).toLowerCase();
    const allowedExts = ['.jpg', '.jpeg', '.png', '.gif', '.webp'];
    const finalExt = allowedExts.includes(ext) ? ext : '.jpg';
    cb(null, uniqueSuffix + finalExt);
  }
});

// Filtr bezpiecze≈Ñstwa dla plik√≥w
const fileFilter = (req, file, cb) => {
  // Sprawd≈∫ MIME type
  const allowedMimes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
  if (!allowedMimes.includes(file.mimetype)) {
    return cb(new Error('Niedozwolony typ pliku. Dozwolone: JPG, PNG, GIF, WEBP'), false);
  }
  
  // Sprawd≈∫ rozszerzenie
  const ext = path.extname(file.originalname).toLowerCase();
  const allowedExts = ['.jpg', '.jpeg', '.png', '.gif', '.webp'];
  if (!allowedExts.includes(ext)) {
    return cb(new Error('Niedozwolone rozszerzenie pliku'), false);
  }
  
  // Sprawd≈∫ nazwƒô pliku - usu≈Ñ niebezpieczne znaki
  const sanitizedName = file.originalname.replace(/[^a-zA-Z0-9.-]/g, '');
  if (sanitizedName.length === 0) {
    return cb(new Error('Nieprawid≈Çowa nazwa pliku'), false);
  }
  
  cb(null, true);
};

const upload = multer({ 
  storage,
  fileFilter,
  limits: {
    fileSize: 5 * 1024 * 1024, // 5MB limit
    files: 1 // tylko 1 plik
  }
});

// Middleware do sprawdzania bezpiecze≈Ñstwa plik√≥w
const validateUploadSecurity = (req, res, next) => {
  // Sprawd≈∫ Headers bezpiecze≈Ñstwa
  req.headers['x-content-type-options'] = 'nosniff';
  req.headers['x-frame-options'] = 'DENY';
  
  next();
};

// U≈ºyj middleware przed wszystkimi endpointami upload
app.use('/api/books', validateUploadSecurity);
app.use('/api/spotet', validateUploadSecurity);

// Endpoint POST - dodawanie oferty
app.post('/api/books', authAndBlockCheck, (req, res) => {
  console.log('ÔøΩüöÄüöÄ NOWY REQUEST DO /api/books! üöÄüöÄüöÄ');
  console.log('ÔøΩüîÑ /api/books POST - Otrzymane dane:', {
    body: req.body,
    hasFile: !!req.file,
    user: req.user ? req.user.mail : 'BRAK'
  });
  
  // Obs≈Çuga uploadu z multer
  upload.single('photo')(req, res, (err) => {
    if (err instanceof multer.MulterError) {
      if (err.code === 'LIMIT_FILE_SIZE') {
        return res.status(400).json({ error: 'Plik jest za du≈ºy. Maksymalny rozmiar: 5MB' });
      }
      return res.status(400).json({ error: 'B≈ÇƒÖd uploadu: ' + err.message });
    } else if (err) {
      return res.status(400).json({ error: err.message });
    }

    // Dane ksiƒÖ≈ºki z formularza
    const { subject, title, publisher, year, grade, price, stan } = req.body;

    // Dane u≈ºytkownika z konta (z middleware)
    const user = req.user;
    console.log('üîç User z middleware:', user ? user.mail : 'BRAK');
    
    if (!user || !user.mail || !user.mail.endsWith('@lo2.przemysl.edu.pl')) {
      console.log('‚ùå B≈ÇƒÖd autoryzacji:', { 
        hasUser: !!user, 
        mail: user?.mail, 
        endsWithSchool: user?.mail?.endsWith('@lo2.przemysl.edu.pl') 
      });
      return res.status(400).json({ message: 'Musisz byƒá zalogowany, aby dodaƒá ksiƒÖ≈ºkƒô.' });
    }
    
    console.log('üîç Sprawdzanie pliku:', { hasFile: !!req.file });
    if (!req.file) {
      console.log('‚ùå Brak zdjƒôcia');
      return res.status(400).json({ error: 'Brak zdjƒôcia (photo)' });
    }

    // Loguj informacje o uploadowanym pliku
    console.log('üì∏ Upload pliku:', {
      originalname: req.file.originalname,
      filename: req.file.filename,
      mimetype: req.file.mimetype,
      size: req.file.size,
      user: user.mail
    });

    const photoUrl = `${req.protocol}://${req.get('host')}/uploads/${req.file.filename}`;
    const date = new Date().toISOString();

    db.run(
      `INSERT INTO books (subject, title, publisher, year, grade, price, stan, photo, date, userMail, userFirstName, userLastName, userClass, userPhone, userMessenger, userInstagram)
       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [subject, title, publisher, year, grade, price, stan, photoUrl, date, user.mail, user.firstName, user.lastName, user.userClass, user.phone, user.messenger, user.instagram],
      function (err) {
        if (err) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy dodawaniu ksiƒÖ≈ºki.' });
        res.status(201).json({ id: this.lastID });
      }
    );
  });
});

// Pobierz wszystkie oferty
app.get('/api/books', (req, res) => {
  db.all('SELECT * FROM books ORDER BY date DESC', [], (err, rows) => {
    if (err) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy pobieraniu ksiƒÖ≈ºek.' });
    res.json(rows);
  });
});

// Pobierz jednƒÖ ofertƒô po ID
app.get('/api/books/:id', (req, res) => {
  db.get('SELECT * FROM books WHERE id = ?', [req.params.id], (err, row) => {
    if (err) return res.status(500).json({ message: 'B≈ÇƒÖd bazy danych' });
    if (!row) return res.status(404).json({ message: 'Nie znaleziono oferty' });
    res.json(row);
  });
});

// Edytuj ofertƒô po ID
app.put('/api/books/:id', (req, res) => {
  const { subject, title, publisher, year, grade, price, stan, photo } = req.body;
  db.run(
    `UPDATE books SET subject = ?, title = ?, publisher = ?, year = ?, grade = ?, price = ?, stan = ?, photo = ? WHERE id = ?`,
    [subject, title, publisher, year, grade, price, stan, photo, req.params.id],
    function(err) {
      if (err) return res.status(500).json({ message: 'B≈ÇƒÖd aktualizacji oferty' });
      res.json({ message: 'Oferta zaktualizowana' });
    }
  );
});

// Usu≈Ñ ofertƒô (admin/przewodniczƒÖcy dowolnƒÖ, user tylko swojƒÖ)
app.delete('/api/books/:id', authAndBlockCheck, (req, res) => {
  const { id } = req.params;
  const currentUser = req.user; // Z middleware authAndBlockCheck

  db.get('SELECT * FROM books WHERE id = ?', [id], (err, book) => {
    if (err) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy sprawdzaniu oferty.' });
    if (!book) return res.status(404).json({ message: 'Nie znaleziono oferty' });

    // Pozw√≥l adminowi/przewodniczƒÖcemu lub w≈Ça≈õcicielowi
    if (
      currentUser.mail === book.userMail ||
      currentUser.mail === 'admin@lo2.przemysl.edu.pl' ||
      currentUser.role === 'admin' ||
      currentUser.role === 'przewodniczƒÖcy' ||
      currentUser.role === 'przewodniczacy'
    ) {
      db.run('DELETE FROM books WHERE id = ?', [id], function (err2) {
        if (err2) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy usuwaniu oferty' });
        res.json({ message: 'Oferta usuniƒôta' });
      });
    } else {
      res.status(403).json({ message: 'Brak uprawnie≈Ñ do usuniƒôcia tej oferty' });
    }
  });
});

// ====================================================================
// ‚úÖ SYSTEM WERYFIKACJI EMAILA PRZEZ KOD
// ====================================================================

// Tabela dla kod√≥w weryfikacyjnych
db.run(`CREATE TABLE IF NOT EXISTS verification_codes (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  email TEXT NOT NULL,
  code TEXT NOT NULL,
  expires_at TEXT NOT NULL,
  used INTEGER DEFAULT 0,
  created_at TEXT DEFAULT CURRENT_TIMESTAMP
)`);

// Funkcja generowania kodu weryfikacyjnego
function generateVerificationCode() {
  return Math.random().toString().slice(2, 8).padStart(6, '0');
}

// ‚úÖ ENDPOINT: Wys≈Çanie kodu weryfikacyjnego na email
app.post('/api/send-verification-code', async (req, res) => {
  try {
    const { email, name } = req.body;
    
    // Walidacja
    if (!email || !name) {
      return res.status(400).json({ 
        success: false, 
        message: 'Email i imiƒô sƒÖ wymagane' 
      });
    }
    
    // Sprawd≈∫ format emaila
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({ 
        success: false, 
        message: 'Nieprawid≈Çowy format email' 
      });
    }
    
    // Sprawd≈∫ czy email ju≈º nie istnieje w bazie
    db.get('SELECT * FROM users WHERE mail = ?', [email], async (err, existingUser) => {
      if (err) {
        console.error('Database error:', err);
        return res.status(500).json({ 
          success: false, 
          message: 'B≈ÇƒÖd serwera' 
        });
      }
      
      if (existingUser) {
        return res.status(400).json({ 
          success: false, 
          message: 'U≈ºytkownik z tym emailem ju≈º istnieje' 
        });
      }
      
      // Wygeneruj kod
      const code = generateVerificationCode();
      const expiresAt = new Date(Date.now() + 15 * 60 * 1000).toISOString(); // 15 minut
      
      // Usu≈Ñ stare kody dla tego emaila
      db.run('DELETE FROM verification_codes WHERE email = ?', [email], (deleteErr) => {
        if (deleteErr) {
          console.error('Error deleting old codes:', deleteErr);
        }
        
        // Zapisz nowy kod
        db.run(
          'INSERT INTO verification_codes (email, code, expires_at) VALUES (?, ?, ?)',
          [email, code, expiresAt],
          async function(insertErr) {
            if (insertErr) {
              console.error('Error saving verification code:', insertErr);
              return res.status(500).json({ 
                success: false, 
                message: 'B≈ÇƒÖd zapisu kodu weryfikacyjnego' 
              });
            }
            
            // Wy≈õlij email z kodem
            try {
              const htmlMessage = `
                <h2 style='color:#FF6B35;'>Wirtualny korytarz LO2</h2>
                <p style='font-size:1.1em;'>Weryfikacja konta:</p>
                <h3 style='color:#333;'>Tw√≥j kod weryfikacyjny</h3>
                <div style='border:2px dashed #FF6B35; background:#f9f9f9; padding:18px; font-size:2em; text-align:center; letter-spacing:4px; margin:18px 0 24px 0; color:#FF6B35; font-weight:bold;'>
                  ${code}
                </div>
                <p>Cze≈õƒá <b>${name}</b>!</p>
                <p>Wpisz powy≈ºszy kod w aplikacji mobilnej, aby potwierdziƒá sw√≥j adres e-mail i zako≈Ñczyƒá rejestracjƒô.</p>
                <p><strong>Kod jest wa≈ºny przez 15 minut.</strong></p>
                <hr>
                <small style='color:#888;'>Wiadomo≈õƒá wygenerowana automatycznie przez aplikacjƒô Wirtualny korytarz LO2.<br>
                Wys≈Çano: ${new Date().toLocaleString('pl-PL')} z IP: ${req.ip}</small>
              `;
              
              await sendMail(
                email,
                'Kod weryfikacyjny - Wirtualny korytarz LO2',
                htmlMessage,
                'peizamowieniaikontaktpei@gmail.com'
              );
              
              console.log(`‚úÖ Kod weryfikacyjny wys≈Çany na ${email}: ${code}`);
              
              res.json({
                success: true,
                message: 'Kod weryfikacyjny zosta≈Ç wys≈Çany na podany adres email',
                expiresIn: 15 // minuty
              });
              
            } catch (emailError) {
              console.error('Email sending error:', emailError);
              
              // Usu≈Ñ kod z bazy je≈õli nie uda≈Ço siƒô wys≈Çaƒá emaila
              db.run('DELETE FROM verification_codes WHERE id = ?', [this.lastID]);
              
              res.status(500).json({ 
                success: false, 
                message: 'B≈ÇƒÖd wysy≈Çania emaila. Spr√≥buj ponownie.' 
              });
            }
          }
        );
      });
    });
    
  } catch (error) {
    console.error('Send verification code error:', error);
    res.status(500).json({ 
      success: false, 
      message: 'B≈ÇƒÖd serwera' 
    });
  }
});

// ‚úÖ ENDPOINT: Weryfikacja kodu
app.post('/api/verify-code', async (req, res) => {
  try {
    const { email, code } = req.body;
    
    // Walidacja
    if (!email || !code) {
      return res.status(400).json({ 
        success: false, 
        message: 'Email i kod sƒÖ wymagane' 
      });
    }
    
    // Znajd≈∫ kod w bazie
    db.get(
      'SELECT * FROM verification_codes WHERE email = ? AND code = ? AND used = 0 ORDER BY created_at DESC LIMIT 1',
      [email, code],
      (err, verificationRecord) => {
        if (err) {
          console.error('Database error:', err);
          return res.status(500).json({ 
            success: false, 
            message: 'B≈ÇƒÖd serwera' 
          });
        }
        
        if (!verificationRecord) {
          return res.status(400).json({ 
            success: false, 
            message: 'Nieprawid≈Çowy kod weryfikacyjny' 
          });
        }
        
        // Sprawd≈∫ czy kod nie wygas≈Ç
        const now = new Date();
        const expiresAt = new Date(verificationRecord.expires_at);
        
        if (now > expiresAt) {
          return res.status(400).json({ 
            success: false, 
            message: 'Kod weryfikacyjny wygas≈Ç. Popro≈õ o nowy kod.' 
          });
        }
        
        // NIE oznaczamy kodu jako u≈ºyty - zostanie oznaczony dopiero przy rejestracji
        console.log(`‚úÖ Kod zweryfikowany pomy≈õlnie dla ${email}`);
        
        res.json({
          success: true,
          message: 'Kod weryfikacyjny poprawny. Mo≈ºesz kontynuowaƒá rejestracjƒô.',
          verified: true
        });
      }
    );
    
  } catch (error) {
    console.error('Verify code error:', error);
    res.status(500).json({ 
      success: false, 
      message: 'B≈ÇƒÖd serwera' 
    });
  }
});

// REJESTRACJA (ZMODYFIKOWANA - z weryfikacjƒÖ kodu)
app.post('/api/register', async (req, res) => {
  console.log('üîÑ /api/register - Otrzymane dane:', req.body);
  const { firstName, lastName, userClass, phone, messenger, instagram, mail, password, verificationCode } = req.body;
  
  console.log('üîç Sprawdzanie czy u≈ºytkownik ju≈º istnieje:', mail);
  db.get('SELECT * FROM users WHERE mail = ?', [mail], async (err, row) => {
    if (err) {
      console.error('‚ùå Database error checking user:', err);
      return res.status(500).json({ message: 'B≈ÇƒÖd bazy danych' });
    }
    if (row) {
      console.log('‚ùå U≈ºytkownik ju≈º istnieje:', mail);
      return res.status(400).json({ message: 'U≈ºytkownik z tym mailem ju≈º istnieje' });
    }

    console.log('üîç Sprawdzanie kodu weryfikacyjnego:', verificationCode, 'dla:', mail);
    // Weryfikacja kodu
    db.get(
      'SELECT * FROM verification_codes WHERE email = ? AND code = ? AND used = 0',
      [mail, verificationCode],
      async (err, verificationRecord) => {
        if (err) {
          console.error('‚ùå Database error checking verification code:', err);
          return res.status(500).json({ message: 'B≈ÇƒÖd bazy danych' });
        }
        if (!verificationRecord) {
          console.log('‚ùå Nieprawid≈Çowy kod weryfikacyjny dla:', mail, 'kod:', verificationCode);
          return res.status(400).json({ message: 'Nieprawid≈Çowy lub u≈ºyty kod weryfikacyjny' });
        }

        console.log('‚úÖ Znaleziono kod weryfikacyjny:', verificationRecord);

        // Sprawd≈∫ czy kod nie wygas≈Ç
        const now = new Date();
        const expiresAt = new Date(verificationRecord.expires_at);
        
        if (now > expiresAt) {
          return res.status(400).json({ message: 'Kod weryfikacyjny wygas≈Ç. Popro≈õ o nowy kod.' });
        }

        const hash = await bcrypt.hash(password, 10);
        db.run(
          `INSERT INTO users (firstName, lastName, userClass, phone, messenger, instagram, mail, password)
           VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
          [firstName, lastName, userClass, phone, messenger, instagram, mail, hash],
          function (err) {
            if (err) return res.status(500).json({ message: 'B≈ÇƒÖd zapisu do bazy' });
            
            // Generuj token JWT po udanej rejestracji
            const newUser = { firstName, lastName, userClass, phone, messenger, instagram, mail, role: 'user' };
            const token = jwt.sign(newUser, SECRET, { expiresIn: '30d' });
            
            // Ustaw httpOnly cookie z tokenem
            res.cookie('jwt_token', token, {
              httpOnly: true,
              secure: process.env.NODE_ENV === 'production', // Secure tylko w production
              sameSite: 'strict',
              maxAge: 30 * 24 * 60 * 60 * 1000, // 30 dni
              domain: process.env.NODE_ENV === 'production' ? '.pei.pl' : undefined // Domain tylko w production
            });
            
            // Oznacz kod jako u≈ºyty
            db.run('UPDATE verification_codes SET used = 1 WHERE id = ?', [verificationRecord.id]);

            res.json({
              message: 'Rejestracja zako≈Ñczona',
              user: newUser
            });
          }
        );
      }
    );
  });
});

// LOGOWANIE
app.post('/api/login', (req, res) => {
  const { mail, password } = req.body;
  db.get('SELECT * FROM users WHERE mail = ?', [mail], async (err, user) => {
    if (err) return res.status(500).json({ message: 'B≈ÇƒÖd bazy danych' });
    if (!user) return res.status(400).json({ message: 'Nieprawid≈Çowy e-mail lub has≈Ço' });

    // SPRAWD≈π BLOKADƒò PRZED SPRAWDZENIEM HAS≈ÅA!
    if (user.blockedUntil && new Date(user.blockedUntil) > new Date()) {
      const ms = new Date(user.blockedUntil) - new Date();
      const min = Math.ceil(ms / 60000);
      return res.status(403).json({
        message: `Konto zablokowane do ${user.blockedUntil} (${min} min). Pow√≥d: ${user.blockReason || 'brak'}`
      });
    }

    // Dopiero teraz sprawdzaj has≈Ço!
    const ok = await bcrypt.compare(password, user.password);
    if (!ok) return res.status(400).json({ message: 'Nieprawid≈Çowy e-mail lub has≈Ço' });

    // Generowanie tokenu JWT
    const token = jwt.sign({ mail: user.mail, role: user.role }, SECRET, { expiresIn: '7d' });

    // Ustaw httpOnly cookie z tokenem
    res.cookie('jwt_token', token, {
      httpOnly: true,        // Niedostƒôpne dla JavaScript
      secure: process.env.NODE_ENV === 'production', // Secure tylko w production
      sameSite: 'strict',    // CSRF protection
      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 dni w milisekundach
      domain: process.env.NODE_ENV === 'production' ? '.pei.pl' : undefined // Domain tylko w production
    });

    // Usu≈Ñ pole password z usera przed wys≈Çaniem!
    const { password: _, ...userData } = user;

    // Zwr√≥ƒá dane u≈ºytkownika bez tokenu (token jest w cookie)
    res.json({ user: userData, message: 'Zalogowano pomy≈õlnie' });
  });
});

// WYLOGOWANIE - endpoint do usuwania cookie
app.post('/api/logout', (req, res) => {
  // Usu≈Ñ cookie z tokenem
  res.clearCookie('jwt_token', {
    domain: process.env.NODE_ENV === 'production' ? '.pei.pl' : undefined,
    path: '/',
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    sameSite: 'strict'
  });
  
  res.json({ message: 'Wylogowano pomy≈õlnie' });
});

// WERYFIKACJA TOKENU - endpoint do sprawdzania wa≈ºno≈õci tokenu i pobierania danych u≈ºytkownika
app.post('/api/verify-token', (req, res) => {
  // Sprawd≈∫ token tylko w cookie (ju≈º nie fallback na Authorization header)
  let token = req.cookies.jwt_token;
  
  if (!token) {
    return res.status(401).json({ message: 'Brak tokenu autoryzacji' });
  }

  jwt.verify(token, SECRET, (err, decoded) => {
    if (err) {
      return res.status(401).json({ message: 'Nieprawid≈Çowy lub wygas≈Çy token' });
    }
    
    // Pobierz aktualnƒÖ wersjƒô u≈ºytkownika z bazy
    db.get('SELECT * FROM users WHERE mail = ?', [decoded.mail], (err, user) => {
      if (err || !user) {
        return res.status(401).json({ message: 'U≈ºytkownik nie istnieje' });
      }
      
      // Sprawd≈∫ blokadƒô
      if (user.blockedUntil && new Date(user.blockedUntil) > new Date()) {
        const ms = new Date(user.blockedUntil) - new Date();
        const min = Math.ceil(ms / 60000);
        return res.status(403).json({
          message: `Konto zablokowane do ${user.blockedUntil} (${min} min). Pow√≥d: ${user.blockReason || 'brak'}`
        });
      }
      
      // Usu≈Ñ has≈Ço z odpowiedzi
      const { password: _, ...userData } = user;
      
      res.json({ 
        valid: true, 
        user: userData,
        token: token // zwr√≥ƒá ten sam token dla kompatybilno≈õci
      });
    });
  });
});

// Usu≈Ñ konto u≈ºytkownika (i powiƒÖzane ksiƒÖ≈ºki)
app.delete('/api/users/:mail', (req, res) => {
  const mail = req.params.mail;
  db.run('DELETE FROM users WHERE mail = ?', [mail], function (err) {
    if (err) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy usuwaniu konta' });
    res.json({ message: 'Konto zosta≈Ço usuniƒôte' });
  });
});

app.put('/api/users/:mail', (req, res) => {
  const { firstName, lastName, userClass, phone, messenger, instagram, blockedUntil, blockReason, role } = req.body;
  db.run(
    `UPDATE users SET firstName = ?, lastName = ?, userClass = ?, phone = ?, messenger = ?, instagram = ?, blockedUntil = ?, blockReason = ?, role = ? WHERE mail = ?`,
    [firstName, lastName, userClass, phone, messenger, instagram, blockedUntil, blockReason, role, req.params.mail],
    function(err) {
      if (err) return res.status(500).json({ message: 'B≈ÇƒÖd aktualizacji danych' });
      res.json({ message: 'Dane u≈ºytkownika zaktualizowane' });
    }
  );
});

// Middleware do sprawdzania roli admina (opcjonalnie, je≈õli masz autoryzacjƒô po sesji/tokenie)
function isAdmin(req, res, next) {
  // Je≈õli masz sesjƒô lub JWT, sprawd≈∫ czy user jest adminem
  // Przyk≈Çad: if (req.user && req.user.role === 'admin') next();
  // Je≈õli nie masz autoryzacji, sprawdzaj po mailu (nie jest to bezpieczne, ale dzia≈Ça lokalnie):
  if (req.body.mail === 'admin@lo2.przemysl.edu.pl') return next();
  res.status(403).json({ message: 'Brak uprawnie≈Ñ' });
}

// Endpoint do usuwania wszystkich ofert (tylko admin)
app.delete('/api/books', isAdmin, (req, res) => {
  db.run('DELETE FROM books', function(err) {
    if (err) return res.status(500).json({ message: 'B≈ÇƒÖd usuwania ofert' });
    res.json({ message: 'Wszystkie oferty zosta≈Çy usuniƒôte' });
  });
});

// Endpoint: zwracanie szczeg√≥≈Ç√≥w ≈ºƒÖdania HTTP jako JSON
app.get('/request-info', (req, res) => {
  res.json({
    method: req.method,
    url: req.originalUrl,
    headers: req.headers,
    ip: req.ip,
    protocol: req.protocol,
    hostname: req.hostname,
    query: req.query,
    body: req.body
  });
});

// Test endpoint dla diagnozy po≈ÇƒÖczenia
app.get('/api/test', (req, res) => {
  res.json({ 
    message: 'Backend dzia≈Ça!', 
    timestamp: new Date().toISOString(),
    ip: req.ip,
    userAgent: req.get('User-Agent')
  });
});

// Uruchom serwer na wszystkich interfejsach
const PORT = 8000; // Zmieniono z 3000 na 8000
app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ Serwer dzia≈Ça na http://0.0.0.0:${PORT} (lub przez domenƒô je≈õli dostƒôpna)`);
});

// Pobierz wszystkich u≈ºytkownik√≥w (tylko admin)
app.get('/api/users', authAndBlockCheck, (req, res) => {
  // Tylko admin mo≈ºe przeglƒÖdaƒá listƒô u≈ºytkownik√≥w
  if (req.user.role !== 'admin') {
    return res.status(403).json({ message: 'Brak uprawnie≈Ñ. Tylko admin mo≈ºe przeglƒÖdaƒá listƒô u≈ºytkownik√≥w.' });
  }
  
  db.all('SELECT id, firstName, lastName, userClass, phone, messenger, instagram, mail, role, blockedUntil, blockReason FROM users', [], (err, rows) => {
    if (err) return res.status(500).json({ message: 'B≈ÇƒÖd bazy danych' });
    // Usu≈Ñ has≈Ça z odpowiedzi (dodatkowe zabezpieczenie)
    const usersWithoutPasswords = rows.map(user => {
      const { password, ...userWithoutPassword } = user;
      return userWithoutPassword;
    });
    res.json(usersWithoutPasswords);
  });
});

app.get('/api/users/:mail', authAndBlockCheck, (req, res) => {
  db.get('SELECT * FROM users WHERE mail = ?', [req.params.mail], (err, row) => {
    if (err) return res.status(500).json({ message: 'B≈ÇƒÖd bazy danych' });
    if (!row) return res.status(404).json({ message: 'Nie znaleziono u≈ºytkownika' });
    
    // Sprawd≈∫ czy u≈ºytkownik ma uprawnienia - mo≈ºe przeglƒÖdaƒá tylko swoje dane lub admin mo≈ºe wszystkie
    const requestingUser = req.user; // z middleware authAndBlockCheck
    if (requestingUser.mail !== req.params.mail && requestingUser.role !== 'admin') {
      return res.status(403).json({ message: 'Brak uprawnie≈Ñ do przeglƒÖdania danych tego u≈ºytkownika' });
    }
    
    // Usu≈Ñ has≈Ço z odpowiedzi
    const { password, ...userData } = row;
    res.json(userData);
  });
});

// Dodawanie anonimowej wiadomo≈õci (z opcjonalnym zdjƒôciem)
// U≈ºyj tej samej bezpiecznej konfiguracji multer dla spotted
const spotetUpload = multer({ 
  storage,
  fileFilter,
  limits: {
    fileSize: 5 * 1024 * 1024, // 5MB limit
    files: 1 // tylko 1 plik
  }
});

// DODANO: authAndBlockCheck jako middleware!
app.post('/api/spotet', authAndBlockCheck, (req, res) => {
  // Obs≈Çuga uploadu z multer
  spotetUpload.single('photo')(req, res, (err) => {
    if (err instanceof multer.MulterError) {
      if (err.code === 'LIMIT_FILE_SIZE') {
        return res.status(400).json({ error: 'Plik jest za du≈ºy. Maksymalny rozmiar: 5MB' });
      }
      return res.status(400).json({ error: 'B≈ÇƒÖd uploadu: ' + err.message });
    } else if (err) {
      return res.status(400).json({ error: err.message });
    }

    const { text } = req.body;
    // BEZPIECZE≈ÉSTWO: Pobierz authorMail z tokena, nie z requesta
    const user = req.user; // Z middleware authAndBlockCheck
    const authorMail = user.mail;
    
    if (!authorMail) return res.status(401).json({ message: 'Musisz byƒá zalogowany.' });
    if (!text || text.trim().length === 0) return res.status(400).json({ message: 'Wiadomo≈õƒá nie mo≈ºe byƒá pusta.' });

    let photoUrl = '';
    if (req.file) {
      // Loguj informacje o uploadowanym pliku
      console.log('üì∏ Upload pliku spotted:', {
        originalname: req.file.originalname,
        filename: req.file.filename,
        mimetype: req.file.mimetype,
        size: req.file.size,
        user: authorMail
      });
      photoUrl = `${req.protocol}://${req.get('host')}/uploads/${req.file.filename}`;
    }
    const date = new Date().toISOString();

    db.run(
      `INSERT INTO spotet (text, photo, date, authorMail) VALUES (?, ?, ?, ?)`,
      [text, photoUrl, date, authorMail],
      function(err) {
        if (err) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy dodawaniu wiadomo≈õci.' });
        res.status(201).json({ id: this.lastID });
      }
    );
  });
});

// Pobierz wszystkie anonimowe wiadomo≈õci
app.get('/api/spotet', (req, res) => {
  // Sprawd≈∫ czy user jest zalogowany i czy jest adminem - u≈ºywaj cookies
  let token = req.cookies.jwt_token;
  let isUserAdmin = false;
  let currentUserMail = null;
  
  if (token) {
    try {
      const decoded = jwt.verify(token, SECRET);
      currentUserMail = decoded.mail;
      isUserAdmin = decoded.role === 'admin';
    } catch (err) {
      // Token nieprawid≈Çowy, kontynuuj jako niezalogowany
    }
  }
  
  db.all(`
    SELECT spotet.id, spotet.text, spotet.photo, spotet.date, spotet.authorMail, users.role as authorRole
    FROM spotet
    LEFT JOIN users ON spotet.authorMail = users.mail
    ORDER BY date DESC
  `, [], (err, rows) => {
    if (err) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy pobieraniu wiadomo≈õci.' });
    
    // Filtruj dane w zale≈ºno≈õci od uprawnie≈Ñ u≈ºytkownika
    const filteredRows = rows.map(row => ({
      ...row,
      authorMail: isUserAdmin ? row.authorMail : null, // Tylko admin widzi emaile
      isCurrentUserAdmin: isUserAdmin,
      currentUserMail: currentUserMail
    }));
    
    res.json(filteredRows);
  });
});

app.delete('/api/spotet/:id', (req, res) => {
  const { id } = req.params;
  db.run('DELETE FROM spotet WHERE id = ?', [id], function(err) {
    if (err) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy usuwaniu.' });
    res.json({ message: 'Usuniƒôto.' });
  });
});

// Dodawanie komentarza do wiadomo≈õci
app.post('/api/spotet/:id/comment', authAndBlockCheck, (req, res) => {
  const { id } = req.params;
  const { text, isAnonymous } = req.body;
  
  // BEZPIECZE≈ÉSTWO: Pobierz autorMail z tokena, nie z requesta
  const user = req.user; // Z middleware authAndBlockCheck
  const authorMail = user.mail;

  if (!text || text.trim().length === 0) {
    return res.status(400).json({ message: 'Komentarz nie mo≈ºe byƒá pusty.' });
  }

  const date = new Date().toISOString();

  db.run(
    `INSERT INTO spotet_comments (spotetId, text, date, authorMail, isAnonymous)
     VALUES (?, ?, ?, ?, ?)`,
    [id, text, date, authorMail, isAnonymous ? 1 : 0],
    function(err) {
      if (err) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy dodawaniu komentarza.' });
      res.status(201).json({ id: this.lastID });
    }
  );
});

// Pobierz komentarze do wiadomo≈õci
app.get('/api/spotet/:id/comments', (req, res) => {
  const { id } = req.params;
  
  // Sprawd≈∫ czy user jest zalogowany i czy jest adminem - u≈ºywaj cookies
  let token = req.cookies.jwt_token;
  let isUserAdmin = false;
  let currentUserMail = null;
  
  if (token) {
    try {
      const decoded = jwt.verify(token, SECRET);
      currentUserMail = decoded.mail;
      isUserAdmin = decoded.role === 'admin';
    } catch (err) {
      // Token nieprawid≈Çowy, kontynuuj jako niezalogowany
    }
  }
  
  db.all('SELECT * FROM spotet_comments WHERE spotetId = ? ORDER BY date DESC', [id], (err, rows) => {
    if (err) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy pobieraniu komentarzy.' });
    
    // Filtruj dane w zale≈ºno≈õci od uprawnie≈Ñ u≈ºytkownika
    const filteredRows = rows.map(row => ({
      ...row,
      // Admin widzi wszystkie emaile, zwyk≈Çy user tylko swoje podpisane komentarze
      displayAuthor: isUserAdmin ? (row.authorMail || 'Anonim') : 
                    (row.isAnonymous ? 'Anonim' : 
                     (row.authorMail === currentUserMail ? row.authorMail : 'Anonim')),
      isCurrentUserAdmin: isUserAdmin,
      currentUserMail: currentUserMail
    }));
    
    res.json(filteredRows);
  });
});

// Endpoint: liczba komentarzy do wiadomo≈õci Spotted
app.get('/api/spotet/:id/comments/count', (req, res) => {
  const { id } = req.params;
  db.get('SELECT COUNT(*) as count FROM spotet_comments WHERE spotetId = ?', [id], (err, row) => {
    if (err) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy zliczaniu komentarzy.' });
    res.json({ count: row ? row.count : 0 });
  });
});

app.get('/api/ogloszenia', (req, res) => {
  const pending = req.query.pending;
  
  // Je≈õli ≈ºƒÖdanie dotyczy og≈Çosze≈Ñ oczekujƒÖcych (pending=1), wymagaj autoryzacji
  if (pending === '1') {
    return authAndBlockCheck(req, res, () => {
      const user = req.user;
      // Sprawd≈∫ uprawnienia do panelu moderacji
      if (user.role !== 'admin' && user.role !== 'przewodniczacy' && user.role !== 'przewodniczƒÖcy') {
        return res.status(403).json({ message: 'Brak uprawnie≈Ñ do przeglƒÖdania og≈Çosze≈Ñ oczekujƒÖcych.' });
      }
      
      db.all('SELECT * FROM ogloszenia WHERE pending = 1 ORDER BY date DESC', [], (err, rows) => {
        if (err) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy pobieraniu og≈Çosze≈Ñ.' });
        res.json(rows);
      });
    });
  }
  
  // Dla zwyk≈Çych og≈Çosze≈Ñ (opublikowanych) nie wymagaj autoryzacji
  db.all('SELECT * FROM ogloszenia WHERE pending = 0 OR pending IS NULL ORDER BY date DESC', [], (err, rows) => {
    if (err) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy pobieraniu og≈Çosze≈Ñ.' });
    res.json(rows);
  });
});

// Dodawanie og≈Çoszenia (z opcjonalnym zdjƒôciem)
app.post('/api/ogloszenia', authAndBlockCheck, upload.single('photo'), (req, res) => {
  const { title, text } = req.body;
  const user = req.user; // Z middleware authAndBlockCheck
  const date = new Date().toISOString();
  
  let photo = null;
  if (req.file) {
    photo = '/uploads/' + req.file.filename;
  }
  
  // Backend okre≈õla czy wymagana jest weryfikacja na podstawie roli z bazy danych
  const requiresVerification = ['user', 'uczen'].includes(user.role);
  const authorRole = user.role;
  const authorMail = user.mail;
  
  db.run(
    `INSERT INTO ogloszenia (title, text, photo, date, authorMail, authorRole, pending)
     VALUES (?, ?, ?, ?, ?, ?, ?)`,
    [title, text, photo, date, authorMail, authorRole, requiresVerification ? 1 : 0],
    function(err) {
      if (err) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy dodawaniu og≈Çoszenia.' });

      // Wy≈õlij maila do usera je≈õli og≈Çoszenie wymaga weryfikacji
      if (requiresVerification && authorMail) {
        const html = `
          <h2>Twoje og≈Çoszenie zosta≈Ço przes≈Çane do weryfikacji</h2>
          <p>Dziƒôkujemy za dodanie og≈Çoszenia. Zostanie ono rozpatrzone przez administracjƒô.<br>
          O decyzji poinformujemy Ciƒô osobnym mailem.</p>
          <hr>
          <p><strong>Tytu≈Ç:</strong> ${title}</p>
          <p><strong>Tre≈õƒá:</strong><br>${text}</p>
          <small>Wys≈Çano: ${new Date().toLocaleString()}</small>
        `;
        sendMail(authorMail, 'PEI: Twoje og≈Çoszenie czeka na akceptacjƒô', html)
          .catch(e => console.error('Mail error:', e));
      }

      res.status(201).json({ id: this.lastID });
    }
  );
});

// Edytuj og≈Çoszenie 
app.put('/api/ogloszenia/:id', authAndBlockCheck, upload.single('photo'), (req, res) => {
  const currentUser = req.user; // Z middleware authAndBlockCheck
  const { title, text } = req.body;

  db.get('SELECT authorMail FROM ogloszenia WHERE id = ?', [req.params.id], (err, row) => {
    if (err || !row) return res.status(404).json({ message: 'Nie znaleziono og≈Çoszenia.' });

    // Tylko admin lub tw√≥rca mo≈ºe edytowaƒá
    if (currentUser.role !== 'admin' && currentUser.mail !== row.authorMail) {
      return res.status(403).json({ message: 'Brak uprawnie≈Ñ do edycji og≈Çoszenia.' });
    }

    let photoSql = '';
    let params = [title, text];
    if (req.file) {
      photoSql = ', photo = ?';
      params.push('/uploads/' + req.file.filename);
    }
    params.push(req.params.id);

    db.run(
      `UPDATE ogloszenia SET title = ?, text = ?${photoSql} WHERE id = ?`,
      params,
      function(err2) {
        if (err2) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy edycji og≈Çoszenia.' });
        res.json({ message: 'Zaktualizowano.' });
      }
    );
  });
});

// Usu≈Ñ og≈Çoszenie (tylko admin lub autor)
app.delete('/api/ogloszenia/:id', authAndBlockCheck, (req, res) => {
  const currentUser = req.user; // Z middleware authAndBlockCheck

  db.get('SELECT authorMail FROM ogloszenia WHERE id = ?', [req.params.id], (err, row) => {
    if (err || !row) return res.status(404).json({ message: 'Nie znaleziono og≈Çoszenia.' });

    if (currentUser.role !== 'admin' && currentUser.mail !== row.authorMail) {
      return res.status(403).json({ message: 'Brak uprawnie≈Ñ do usuniƒôcia og≈Çoszenia.' });
    }

    db.get('SELECT photo FROM ogloszenia WHERE id = ?', [req.params.id], (err2, row2) => {
      if (row2 && row2.photo) {
        const filePath = path.join(__dirname, row2.photo);
        fs.unlink(filePath, () => {});
      }
      db.run('DELETE FROM ogloszenia WHERE id = ?', [req.params.id], function(err3) {
        if (err3) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy usuwaniu og≈Çoszenia' });
        res.json({ message: 'Usuniƒôto.' });
      });
    });
  });
});

// Akceptacja og≈Çoszenia (ustawia pending=0) - tylko dla admin/przewodniczƒÖcy
app.post('/api/ogloszenia/:id/accept', authAndBlockCheck, (req, res) => {
  const { id } = req.params;
  const currentUser = req.user; // Z middleware authAndBlockCheck
  
  // Sprawd≈∫ uprawnienia do moderacji
  if (currentUser.role !== 'admin' && currentUser.role !== 'przewodniczacy' && currentUser.role !== 'przewodniczƒÖcy') {
    return res.status(403).json({ message: 'Brak uprawnie≈Ñ do akceptacji og≈Çosze≈Ñ.' });
  }
  
  db.run('UPDATE ogloszenia SET pending = 0 WHERE id = ?', [id], function(err) {
    if (err) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy akceptacji og≈Çoszenia.' });
    if (this.changes === 0) return res.status(404).json({ message: 'Nie znaleziono og≈Çoszenia.' });
    res.json({ message: 'Og≈Çoszenie zaakceptowane.' });
  });
});

// Odrzucenie og≈Çoszenia (usuwa og≈Çoszenie i wysy≈Ça maila) - tylko dla admin/przewodniczƒÖcy
app.post('/api/ogloszenia/:id/reject', authAndBlockCheck, (req, res) => {
  const { id } = req.params;
  const { reason } = req.body;
  const currentUser = req.user; // Z middleware authAndBlockCheck
  
  // Sprawd≈∫ uprawnienia do moderacji
  if (currentUser.role !== 'admin' && currentUser.role !== 'przewodniczacy' && currentUser.role !== 'przewodniczƒÖcy') {
    return res.status(403).json({ message: 'Brak uprawnie≈Ñ do odrzucania og≈Çosze≈Ñ.' });
  }
  
  db.get('SELECT authorMail, title FROM ogloszenia WHERE id = ?', [id], (err, row) => {
    if (row && row.authorMail) {
      const html = `
        <h2>Twoje og≈Çoszenie zosta≈Ço odrzucone</h2>
        <p>Og≈Çoszenie <strong>${row.title}</strong> zosta≈Ço odrzucone przez administracjƒô.</p>
        <p><strong>Pow√≥d:</strong> ${reason || 'brak podanego powodu'}</p>
        <hr>
        <small>Wys≈Çano: ${new Date().toLocaleString()}</small>
      `;
      sendMail(row.authorMail, 'PEI: Twoje og≈Çoszenie zosta≈Ço odrzucone', html)
        .catch(e => console.error('Mail error:', e));
    }
    db.run('DELETE FROM ogloszenia WHERE id = ?', [id], function(err2) {
      if (err2) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy odrzucaniu og≈Çoszenia.' });
      res.json({ message: 'Og≈Çoszenie odrzucone.' });
    });
  });
});

const transporter = nodemailer.createTransport({
  host: 'smtp.gmail.com',
  port: 587,
  secure: false,
  auth: {
    user: 'peizamowieniaikontaktpei@gmail.com',
    pass: 'xmug cmsb fzey rurf'
  }
});

function sendMail(to, subject, html, replyTo) {
  return transporter.sendMail({
    from: 'Weryfikacja og≈Çoszenia LO2 <peizamowieniaikontaktpei@gmail.com>',
    to,
    subject,
    html,
    replyTo
  });
}

// Middleware autoryzacji i sprawdzania blokady - obs≈Çuguje cookies
function authAndBlockCheck(req, res, next) {
  // Sprawd≈∫ token w cookie (priorytet) lub w header Authorization (fallback)
  let token = req.cookies.jwt_token;
  
  if (!token) {
    // Fallback - sprawd≈∫ header Authorization dla kompatybilno≈õci wstecznej
    const authHeader = req.headers['authorization'] || req.headers['Authorization'];
    if (authHeader && authHeader.startsWith('Bearer ')) {
      token = authHeader.split(' ')[1];
    }
  }
  
  if (!token) {
    return res.status(401).json({ message: 'Brak tokenu autoryzacji. Zaloguj siƒô ponownie.' });
  }

  jwt.verify(token, SECRET, (err, decoded) => {
    if (err) return res.status(401).json({ message: 'Nieprawid≈Çowy token. Zaloguj siƒô ponownie.' });
    
    // Pobierz u≈ºytkownika z bazy
    db.get('SELECT * FROM users WHERE mail = ?', [decoded.mail], (err, user) => {
      if (err || !user) return res.status(401).json({ message: 'Brak u≈ºytkownika.' });
      
      // Sprawd≈∫ blokadƒô
      if (user.blockedUntil && new Date(user.blockedUntil) > new Date()) {
        const ms = new Date(user.blockedUntil) - new Date();
        const min = Math.ceil(ms / 60000);
        return res.status(403).json({
          message: `Konto zablokowane do ${user.blockedUntil} (${min} min). Pow√≥d: ${user.blockReason || 'brak'}`
        });
      }
      
      // Je≈õli blokada zosta≈Ça zdjƒôta, ale token jest stary, informuj o konieczno≈õci ponownego logowania
      if (!user.blockedUntil && decoded.blockedUntil) {
        return res.status(401).json({
          message: 'Twoja blokada zosta≈Ça zdjƒôta. Zaloguj siƒô ponownie, aby korzystaƒá z serwisu.'
        });
      }
      
      req.user = user; // przekazujemy dalej
      next();
    });
  });
}

// Sprawdzanie blokady u≈ºytkownika
app.post('/api/check-block', (req, res) => {
  const { mail } = req.body;
  if (!mail) return res.status(400).json({ message: 'Brak maila.' });
  db.get('SELECT blockedUntil, blockReason FROM users WHERE mail = ?', [mail], (err, user) => {
    if (err || !user) return res.status(404).json({ message: 'Nie znaleziono u≈ºytkownika.' });
    if (user.blockedUntil && new Date(user.blockedUntil) > new Date()) {
      const ms = new Date(user.blockedUntil) - new Date();
      const min = Math.ceil(ms / 60000);
      return res.status(403).json({
        message: `Konto zablokowane do ${user.blockedUntil} (${min} min). Pow√≥d: ${user.blockReason || 'brak'}`
      });
    }
    res.json({ ok: true });
  });
});

// Pobierz komentarze do og≈Çoszenia
app.get('/api/ogloszenia/:id/comments', (req, res) => {
  const { id } = req.params;
  db.all('SELECT * FROM ogloszenia_comments WHERE ogloszenieId = ? ORDER BY date DESC', [id], (err, rows) => {
    if (err) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy pobieraniu komentarzy.' });
    res.json(rows);
  });
});

// Liczba komentarzy do og≈Çoszenia
app.get('/api/ogloszenia/:id/comments/count', (req, res) => {
  const { id } = req.params;
  db.get('SELECT COUNT(*) as count FROM ogloszenia_comments WHERE ogloszenieId = ?', [id], (err, row) => {
    if (err) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy zliczaniu komentarzy.' });
    res.json({ count: row ? row.count : 0 });
  });
});

// Dodawanie komentarza do og≈Çoszenia - wymaga autoryzacji
app.post('/api/ogloszenia/:id/comment', authAndBlockCheck, (req, res) => {
  const { id } = req.params;
  const { text } = req.body;
  const currentUser = req.user; // Z middleware authAndBlockCheck

  // Debug log
  console.log('Dodawanie komentarza:', { id, text, authorMail: currentUser.mail });

  if (!text || text.trim().length === 0) {
    return res.status(400).json({ message: 'Komentarz nie mo≈ºe byƒá pusty.' });
  }

  const date = new Date().toISOString();
  const authorMail = currentUser.mail; // U≈ºyj maila z tokena, nie z requesta

  db.run(
    `INSERT INTO ogloszenia_comments (ogloszenieId, text, date, authorMail)
     VALUES (?, ?, ?, ?)`,
    [id, text, date, authorMail],
    function(err) {
      if (err) {
        console.error('B≈ÇƒÖd SQL przy dodawaniu komentarza:', err);
        return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy dodawaniu komentarza.' });
      }
      res.status(201).json({ id: this.lastID });
    }
  );
});

// Usu≈Ñ komentarz do og≈Çoszenia - tylko admin lub w≈Ça≈õciciel komentarza
app.delete('/api/ogloszenia/comments/:id', authAndBlockCheck, (req, res) => {
  const { id } = req.params;
  const currentUser = req.user; // Z middleware authAndBlockCheck
  
  // Najpierw sprawd≈∫ kto jest w≈Ça≈õcicielem komentarza
  db.get('SELECT authorMail FROM ogloszenia_comments WHERE id = ?', [id], (err, row) => {
    if (err) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy sprawdzaniu komentarza.' });
    if (!row) return res.status(404).json({ message: 'Nie znaleziono komentarza.' });
    
    // Sprawd≈∫ uprawnienia: admin lub w≈Ça≈õciciel komentarza
    if (currentUser.role !== 'admin' && currentUser.mail !== row.authorMail) {
      return res.status(403).json({ message: 'Brak uprawnie≈Ñ do usuniƒôcia tego komentarza.' });
    }
    
    // Usu≈Ñ komentarz
    db.run('DELETE FROM ogloszenia_comments WHERE id = ?', [id], function(err2) {
      if (err2) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy usuwaniu komentarza.' });
      if (this.changes === 0) return res.status(404).json({ message: 'Nie znaleziono komentarza.' });
      res.json({ message: 'Komentarz usuniƒôty.' });
    });
  });
});

// Usu≈Ñ komentarz do wiadomo≈õci spotted (admin lub w≈Ça≈õciciel)
app.delete('/api/spotet/comments/:id', authAndBlockCheck, (req, res) => {
  const { id } = req.params;
  const currentUser = req.user; // Z middleware authAndBlockCheck
  
  // Sprawd≈∫ czy komentarz istnieje i kto go napisa≈Ç
  db.get('SELECT * FROM spotet_comments WHERE id = ?', [id], (err, comment) => {
    if (err) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy sprawdzaniu komentarza.' });
    if (!comment) return res.status(404).json({ message: 'Nie znaleziono komentarza.' });
    
    // Tylko admin lub w≈Ça≈õciciel komentarza mo≈ºe go usunƒÖƒá
    if (currentUser.role !== 'admin' && currentUser.mail !== comment.authorMail) {
      return res.status(403).json({ message: 'Brak uprawnie≈Ñ do usuniƒôcia tego komentarza.' });
    }
    
    // Usu≈Ñ komentarz
    db.run('DELETE FROM spotet_comments WHERE id = ?', [id], function(err) {
      if (err) return res.status(500).json({ message: 'B≈ÇƒÖd serwera przy usuwaniu komentarza.' });
      res.json({ message: 'Komentarz usuniƒôty.' });
    });
  });
});

// Funkcja do dodawania brakujƒÖcych kolumn w istniejƒÖcych tabelach
function updateExistingTables() {
  // Sprawd≈∫ czy tabela users istnieje przed pr√≥bƒÖ dodania kolumn
  db.get("SELECT name FROM sqlite_master WHERE type='table' AND name='users'", (err, row) => {
    if (err) {
      console.log('B≈ÇƒÖd sprawdzania tabeli users:', err.message);
      return;
    }
    
    if (!row) {
      console.log('Tabela users nie istnieje jeszcze - pomijam aktualizacjƒô kolumn');
      return;
    }

    // Sprawd≈∫ jakie kolumny ju≈º istniejƒÖ
    db.all("PRAGMA table_info(users)", (err, columns) => {
      if (err) {
        console.log('B≈ÇƒÖd sprawdzania kolumn tabeli users:', err.message);
        return;
      }

      const existingColumns = columns.map(col => col.name);
      
      // Dodaj kolumnƒô role je≈õli nie istnieje
      if (!existingColumns.includes('role')) {
        db.run(`ALTER TABLE users ADD COLUMN role TEXT DEFAULT 'user'`, (err) => {
          if (err) {
            console.log('B≈ÇƒÖd dodawania kolumny role:', err.message);
          } else {
            console.log('‚úÖ Dodano kolumnƒô role do tabeli users');
          }
        });
      }
      
      // Dodaj kolumnƒô blockedUntil je≈õli nie istnieje
      if (!existingColumns.includes('blockedUntil')) {
        db.run(`ALTER TABLE users ADD COLUMN blockedUntil TEXT`, (err) => {
          if (err) {
            console.log('B≈ÇƒÖd dodawania kolumny blockedUntil:', err.message);
          } else {
            console.log('‚úÖ Dodano kolumnƒô blockedUntil do tabeli users');
          }
        });
      }
      
      // Dodaj kolumnƒô blockReason je≈õli nie istnieje
      if (!existingColumns.includes('blockReason')) {
        db.run(`ALTER TABLE users ADD COLUMN blockReason TEXT`, (err) => {
          if (err) {
            console.log('B≈ÇƒÖd dodawania kolumny blockReason:', err.message);
          } else {
            console.log('‚úÖ Dodano kolumnƒô blockReason do tabeli users');
          }
        });
      }
    });
  });
}

// Wywo≈Çaj aktualizacjƒô tabel dla istniejƒÖcych baz danych po kr√≥tkim op√≥≈∫nieniu
setTimeout(() => {
  updateExistingTables();
}, 100);

// Endpoint do sprawdzania uprawnie≈Ñ u≈ºytkownika
app.get('/api/check-permissions', authAndBlockCheck, (req, res) => {
  const user = req.user;
  
  const permissions = {
    canAddBooks: true, // ka≈ºdy zalogowany mo≈ºe dodawaƒá ksiƒÖ≈ºki
    canAddSpotted: true, // ka≈ºdy zalogowany mo≈ºe dodawaƒá spotted
    canAddAnnouncements: ['admin', 'nauczyciel', 'przewodniczƒÖcy', 'przewodniczacy', 'uczen', 'user'].includes(user.role),
    canSeeAdminPanel: ['admin', 'przewodniczƒÖcy', 'przewodniczacy'].includes(user.role),
    canAccessAdminPanel: ['admin', 'przewodniczƒÖcy', 'przewodniczacy'].includes(user.role),
    canDeleteAnyOffer: ['admin', 'przewodniczƒÖcy', 'przewodniczacy'].includes(user.role),
    canModerateContent: user.role === 'admin',
    canSeeAllEmails: user.role === 'admin',
    role: user.role,
    mail: user.mail,
    isAdmin: user.role === 'admin',
    isPrzewodniczacy: ['przewodniczƒÖcy', 'przewodniczacy'].includes(user.role)
  };
  
  res.json(permissions);
});

// Endpoint do sprawdzania uprawnie≈Ñ do konkretnej akcji
app.post('/api/check-action-permission', authAndBlockCheck, (req, res) => {
  const user = req.user;
  const { action, resourceId, resourceType } = req.body;
  
  let hasPermission = false;
  
  switch (action) {
    case 'delete_book':
      // Admin mo≈ºe usuwaƒá wszystkie, user tylko swoje
      if (user.role === 'admin') {
        hasPermission = true;
      } else if (resourceId) {
        // Sprawd≈∫ w bazie czy user jest w≈Ça≈õcicielem ksiƒÖ≈ºki
        db.get('SELECT userMail FROM books WHERE id = ?', [resourceId], (err, book) => {
          if (err) return res.status(500).json({ message: 'B≈ÇƒÖd bazy danych' });
          hasPermission = book && book.userMail === user.mail;
          res.json({ hasPermission, reason: hasPermission ? 'owner' : 'not_owner' });
        });
        return; // exit early dla async sprawdzenia
      }
      break;
      
    case 'delete_spotted':
      // Admin mo≈ºe usuwaƒá wszystkie, user tylko swoje
      if (user.role === 'admin') {
        hasPermission = true;
      } else if (resourceId) {
        db.get('SELECT authorMail FROM spotet WHERE id = ?', [resourceId], (err, spotted) => {
          if (err) return res.status(500).json({ message: 'B≈ÇƒÖd bazy danych' });
          hasPermission = spotted && spotted.authorMail === user.mail;
          res.json({ hasPermission, reason: hasPermission ? 'owner' : 'not_owner' });
        });
        return;
      }
      break;
      
    case 'delete_announcement':
      // Admin mo≈ºe usuwaƒá wszystkie, przewodniczƒÖcy tylko swoje
      if (user.role === 'admin') {
        hasPermission = true;
      } else if (['przewodniczƒÖcy', 'przewodniczacy'].includes(user.role) && resourceId) {
        db.get('SELECT authorMail FROM ogloszenia WHERE id = ?', [resourceId], (err, announcement) => {
          if (err) return res.status(500).json({ message: 'B≈ÇƒÖd bazy danych' });
          hasPermission = announcement && announcement.authorMail === user.mail;
          res.json({ hasPermission, reason: hasPermission ? 'owner' : 'not_owner' });
        });
        return;
      }
      break;
      
    case 'edit_announcement':
      // Podobnie jak delete_announcement
      if (user.role === 'admin') {
        hasPermission = true;
      } else if (['przewodniczƒÖcy', 'przewodniczacy'].includes(user.role) && resourceId) {
        db.get('SELECT authorMail FROM ogloszenia WHERE id = ?', [resourceId], (err, announcement) => {
          if (err) return res.status(500).json({ message: 'B≈ÇƒÖd bazy danych' });
          hasPermission = announcement && announcement.authorMail === user.mail;
          res.json({ hasPermission, reason: hasPermission ? 'owner' : 'not_owner' });
        });
        return;
      }
      break;
      
    case 'delete_comment':
      // Admin mo≈ºe usuwaƒá wszystkie komentarze, user tylko swoje
      if (user.role === 'admin') {
        hasPermission = true;
      } else if (resourceId && resourceType) {
        const table = resourceType === 'spotted' ? 'spotet_comments' : 'ogloszenia_comments';
        db.get(`SELECT authorMail FROM ${table} WHERE id = ?`, [resourceId], (err, comment) => {
          if (err) return res.status(500).json({ message: 'B≈ÇƒÖd bazy danych' });
          hasPermission = comment && comment.authorMail === user.mail;
          res.json({ hasPermission, reason: hasPermission ? 'owner' : 'not_owner' });
        });
        return;
      }
      break;
      
    default:
      hasPermission = false;
  }
  
  res.json({ hasPermission, reason: hasPermission ? 'authorized' : 'unauthorized' });
});
